// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrickVault.Api.Data;

#nullable disable

namespace TrickVault.Api.Migrations
{
    [DbContext(typeof(TrickVaultDbContext))]
    [Migration("20251007000943_SeedInitialTestData")]
    partial class SeedInitialTestData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TrickCategory", b =>
                {
                    b.Property<int>("TrickId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("TrickId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("TrickCategory", (string)null);

                    b.HasData(
                        new
                        {
                            TrickId = 1,
                            CategoryId = 7
                        },
                        new
                        {
                            TrickId = 1,
                            CategoryId = 8
                        },
                        new
                        {
                            TrickId = 2,
                            CategoryId = 1
                        });
                });

            modelBuilder.Entity("TrickVault.Api.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Card Magic"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Coin Magic"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mentalism"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bizarre Magic"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Illusions"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Escapology"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Children's Magic"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Comedy Magic"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Utility / Sleights"
                        });
                });

            modelBuilder.Entity("TrickVault.Api.Models.Trick", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Credits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Effect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Setup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Tricks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comments = "This is great with children.",
                            Credits = "Many poor magicians.",
                            Effect = "The magician shows an empty hat, then pulls a rabbit out of it",
                            Method = "Magician shows an empty hat, then reaches into secret compartment and removes hidden rabbit",
                            Patter = "Look, the hat is completely empty. Except for this here ribbit!",
                            Setup = "Put rabbit in hat",
                            Title = "Pull Rabbit from Hat"
                        },
                        new
                        {
                            Id = 2,
                            Effect = "Magician has audience member select a random card. The card is shuffled back into the deck. Then the magician finds the selected card.",
                            Method = "Spectator selects a card. The card is returned to the deck and the deck is then shuffled. Then through secret means (not given here), the magician is able to find the selected card.",
                            Patter = "Pick a card, any card! Show the audience. Now put it back anywhere in the deck. I'm going to shuffle the cards a few times. Now, I couldn't possibly know the location of your card, right? Yet here it is!",
                            Title = "Pick a Card"
                        });
                });

            modelBuilder.Entity("TrickCategory", b =>
                {
                    b.HasOne("TrickVault.Api.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TrickCategory_CategoryId");

                    b.HasOne("TrickVault.Api.Models.Trick", null)
                        .WithMany()
                        .HasForeignKey("TrickId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TrickCategory_TrickId");
                });
#pragma warning restore 612, 618
        }
    }
}
